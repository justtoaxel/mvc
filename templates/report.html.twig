{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <div class="two-col-layout">
    <main class="main">
        <article class="article">
        <h1>Kurs Rapporter</h1>
<ul>
  <li>
    <h2 id="kmom1">Kursmoment 1</h2>
    <p>Jag har lite erfarenhet av klasser och objekt utifrån C++ som är ett programmeringsspråk jag använder i ett spela jag producerar, utöver det lärde jag nog mig lite av de vi lärde oss i PHP kursen förra året i denna kurs på BTH. Jag märkte ganska tydligt att jag glömt det mesta kring PHP lite tråkigt nog, men hoppas att det kommer tillbaka nu när jag sitter igen med det.</p>
    <p>Det viktigaste att tänka sig kring klasser är att de fungerar lite likt en funktion. Det vikigaste att veta är att en klass är en förälder entitet till ett objekt. Vad detta innebär är alltså att objekten ärver variabler och beteende/funktioner från förälder klassen, men varje objekt kan hålla ett eget värde i dessa. Ett objekt kan efterliknas till en array, då det med andra ord innehåller variabler och olika former av data.</p>
    <p>Jag tycker kodbasen som alltid kanske känns lite krånglig när man behöver lära sig ramverk, så har lite svårt i nuvarande stadie att säga att jag har någon bättre uppfattning om vad jag tycker om den. Den verkar enklare på vissa sätt, och svårare på andra. På rak arm, tyckte jag om hur routes fungerade i Symfony, kändes ganska förenklat och snabbt.</p>
    <p> Eftersom jag är väldigt intresserade av just databaser tycker jag databas delen är väldigt intressant att kolla på, jag gillar även mycket PHP som ett verktyg för templating, då det på ett sätt tar bort behov av vissa externa ramverk för design, och man istället kan bygga sin egna design-moduler. Jag skulle inom en framtid gärna se att jag läser mer om dessa två delar och lär mig mer. </p>
    <p>Mitt TIL för detta moment är återigen att jag alltid måste lära mig om hur man använder och sätter upp olika labbmiljöer, hade glömt en hel del kring GIT till exempel, så blir bra för min lärdom igen att börja använda mig av det.</p>
    <p>En sak jag bemärkte var dock att PHP Lint verkade inte jätte sugen på vissa av de filerna som kommer med programmet, men som i andra kursmoment överväger jag lite vikten av att ändra saker som inte verkar vara super kritiska även om LINT klagar, i detta fall syftar jag t.ex främst på klagomål över "up" i migrations filerna</p>
</li>
  <li>
    <h2 id="kmom2">Kursmoment 2</h2>
    <p>Ett arv innebär att en klass som är definierad via arv kan använda alla variabler och metoder som finns i "föräldern", arvet är alltså ett "barn". Likt ett barn så kan dock även ett arv specifika metoder och variabler vilket gör att dom kan ha unika instanser. En kompositions-klass är en klass som komponeras utifrån objekt från en annan klass. Detta innebär att till exempel att en "kortlek" innehåller flera objekt av klassen "kort". En interface är en klass med en samling av metoder, det är ett sätt att se till att man har flera objekt som kan användas utbytbart då de har samma metoder. En trait är en klass som innehåller metoder. Klasser kan sedan ärva metoder från traits vilket innebär att den kan användas på flertal klasser.</p>
    <p>Jag tyckte det var mycket svårt att komma igång med denna uppgift och för att hålla en god konstruktion på lasserna. Det värsta var nog dock att förstå konceptet över hur jag skulle bygga upp kortleken, eftersom i tärningsuppgiften fick vi bara veta hur man byggde en tärningshand via "draw" funktionen. Vilket skapade dubbletter av kort. Jag lyckades till slut lösa det genom att bygga om i princip hela koden annorlunda från övningsuppgifterna och istället hade en 52-antalig array och representerade den med index som injeceras via routen. Resten var ganska enkelt, med "array_splice"-funktioner och shuffle som redan är inbbygt i PHP. Sparnings av session och hämtning var också ganska snabbt, det var inga större problem där</p>
    <p>Jag har lite svårt att bedöma för tillfället huruvida jag skulle förbättra koden. Jag antar att det är något jag lär se mer av senare när jag väll behöver använda liknande klasser för kortspelet. Jag gissar på att jag kanske skulle kunna på något sätt minska antalet funktioner som jag använder.</p>
    <p>Jag jobbade inte något med modelleringen, eftersom det kändes lite svårt för mig att förstå mig på överhuvudtaget hur jag kunde applicera klasserna i PHP. Det var möjligtvis någon form av mental tanke process innan men jag kände i detta skede att jag inte hade kunskapen att modellera systemet innan jag hade koda Objekt Orienterat. Vid nästa tillfälle lär jag nog förstå bättre och kunna modellera innan</p>
    <p>Mitt TIL för detta moment är att förstå mig på allmänt hur PHP OOP fungerar. Jag tycker det har varit lite knepigt att förstå hela processen med $this->value och allt programmerings-semantik fungerar, men hoppas att jag lär förstå det inför nästa moment nu</p>
  </li>
  <li>
    <h2 id="kmom3">Kursmoment 3</h2>
    <p>Jag tyckte om att bygga upp ett flödesschema eftersom det gav en bra överblick över planen för projektet. Vad gällde klasserna och pseudokoden så hade jag ju redan det mesta gjort från tidigare kursmoment, och det kändes mer som att klassernas utveckling och kod utvecklas för mig, allt eftersom man arbetar, och man ser mer behoven. Detta tillskriver jag nog framförallt som okunskap från min del och att detta blir enklare när man vet mer vilka typer av metoder man bör förväntas använda.</p>
    <p>Min implementation från uppgiften tror jag var lång från optimal och jag tror pågrund av tidsbrist att jag defintivt kan förbättra den en hel del. Jag ponerade mycket över att skriva om grundkoden från förra momentet och börja från start, men tänkte sedan att det ändå var ett bra läromoment att anpassa mig efter det som jag redan byggt. Jag lyckades utnyttja alla klasser från förra uppgiften med ett tillägg av en till "hand"-klass som representerade bankens hand. Jag är relativt nöjd att jag fick koden att fungera utifrån det jag hade, men hoppas att jag lär inför bilbioteks momentet kunna göra en bättre grund nu när jag förstår mer.</p>
    <p>Jag tycker Symfony har varit ganska enkelt att koda med nu när jag förstått hur routsen fungerar. Detta var något som var ganska problematiskt i början framförallt logiken kring namespace et.c, men nu känner jag inte svårigheter kring systemet. I alla fall i det mån som jag använt det</p>
    <p>Mitt TIL för detta moment är hur man arbetar med klasserna, och framförallt hur man arbetar i att bygga kod-funktioner som "flöder" in i varandra och automatiserar processen av att skicka vidare "variabler" från klass till klass.</p>
  </li>
  <li>
    <h2 id="kmom4">Kursmoment 4</h2>
    <p>I början tyckte jag att PHPUnit verkade väldigt invecklat. Jag förstod inte särskilt mycket vad assertsen gjorde och sammahangen med dom. Så jag bestämde mig att läsa på lite mer och sen insåg jag hur många olika varianter av "Asserts" som fanns, och då klarnade det helt plötsligt. Jag tycker det var väldigt smidigt för den typer av krav jag hade och kunde testa ganska enkelt då. PHPUNIT verkar användbart då jag till exempel listade ut att jag hade några metoder Hand-klasserna som jag inte behövde använda längre så jag kunde helt enkelt ta bort dom.</p>
    <p>Jag lyckades nå ca 85% av kodtäckningen, jag tycker det var lite märkligt att Klasserna inte räknas som täckta förns de har 100% av alla metoder gjorda. Jag hade nog kunnat nå 100% täckning, men kände pågrund av tidsbrist att jag behövde hindra mig från att sitta för länge. Jag förväntar mig behöva lägga mycket mer tid på de nästkommande kursmomentet samt även projektet och känner att jag framförallt bara ville täcka det som var minimi, men även med marginal i detta fall, så det kändes bra. </p>
    <p>Jag upplevde i retrospekt med testningen att min kod kändes testbar, däremot kände jag väll att jag defintivt kunde optimerat koden mer. Jag kunde gjort några fler metoder som annars låg i routsen, men återigen pågrund av tidsbrist i förra momentet så skyndade jag på kanske lite väl mycket och detta är något jag nu kan ta med mig tills nästa moment.</p>
    <p>Jag valde som sagt att ta bort 2 metoder eftersom dom faktiskt inte användes, på så sätt kan man säga att jag förbättrade koden. Jag hade nog inte riktigt märkt detta om jag inte använt PHPUNIT. Jag skrev inte rikigt om koden för övrigt men anpassade istället testen efter koden.</p>
    <p>Jag tror nog defintivt att testbar kod kan identifiera snygg och ren kod, i form av att ju mindre man måste anpasssa test-klasserna ju snyggare är koden, det är i alla fall min tolkning. Det var något även som jag märkte i min kod, att vissa sektioner var lite enklare att testa än andra, och det var oftast den kod som jag hade bättre struktur på</p>
    <p>Mitt TIL för detta KMOM var att PHPUnit och funktionen över den. Jag började även få ännu störe förståelse hur jag kan förbättra min kod, och det ska bli intressant hur detta kommer ändra mitt tillvägagångasätt inför Biblioteks-kursmommentet.</p>
  </li>
  <li>
    <h2 id="kmom5">Kursmoment 5</h2>
    <p>Jag tycker att det gick bra att jobba igenom övningen. Jag tycker att denna övningen faktiskt gav en bättre översikt av hur man bör skriva bättre objekt orienterad kod. Att sätta upp själva databasen var även enklare än vad jag trodde, vilket var en oerhörd lättnad. Jag tycker även det verkade ganska smidigt med att bygga funktioner via DQL och hur man kunde göra det i själva respository:n.</p>
    <p>När jag byggde applikationen tänkte jag tillbaka på kursen Webtec, och jag mindes att vi där gjorde ett moment kring användare och administrationen av dessa. Jag tänkte därför att jag skulle återskapa liknande och att jag förhoppningsvis kunde återanvända lite kod från det kursmomentet, men det kunde jag inte. Däremot gav det lite inspiration för själva flödet av användargränssnittet. Annars var fokus på att ha en överskådlig tabell där man kan ändra direkt varje individuell rad vilket gick bra och det gör snabbare att gå igenom objekt.</p>
    <p>Jag tycker att ORM verkade ganska enkelt att använda, nu gjordes det ju dock inget djupdyk så jag antar att det kanske finns vissa brister med det. Jag tycker nog personligen att jag föredrog arbetssättet i databas kursen, för det kändes som att man hade väldigt mycket kontroll på det sättet, även om det var jobbigt att bygga upp grunden av ett sådant system så hade man väldigt goda förutsättningar för att göra exakt det man ville. I ORM är det säkert mycket man kan göra, men får återigen känslan att man kanske inte har exakt samma kontroll.</p>
    <p>Om jag uppfattar frågan korrekt så om man jämför till exempel med PDO från Webtec kursen, så utifrån det jag minns kändes detta mycket enklare. Jag hade inga problem, och ORM var defintivt effektivt att få igång. Det tog några timmar att sätta upp ett system som hade tagit mycket längre med andra system, så jag kan defintivt se potentialen i använda sig av ORM.</p>
    <p>Mitt TIL för detta moment är hur Symfony kombinerat med Doctrine är väldigt kraftfulla i processen av att sätta upp hemsidor med mer avancerad funktionalitet under korttid.</p>
  </li>
  <li>
    <h2 id="kmom6">Kursmoment 6</h2>
    <p>Jag tyckte om PHPMetrics då get gav en mycket god överblick över kod men man kunde även få bra detaljer om man väl ville gå in och kolla på specifica delar. Det var två grejer som imponerade mig, jag tyckte om att man kunde köra PHPMetrics lokalt på datorn. Det andra var själva dashboard vyn, där man kunde få en väldigt god överblick och faktumet att den importerar resultaten från PHPUnit och gör arbetet med coverage mycket enklare och läsbart. Jag tycker även det var ganska intressant att se cirkeldiagrammen över komplexcitet då det gör en direkt inblick i förbättringsområden. I mitt fall försökte jag aldrig riktigt göra tester för kontrollerna så det var inte kanske lika relevant, men fortfarande känns detta som en väldigt händig resurs.</p>
    <p>Jag tycker det gick fort att integrera med Scrutinizer. Jag har haft ganska mycket problem i kursen med de olika verktygen men Scrutinizer var en av de som förvånansvärt gick enklast vilket jag inte hade fått intrycket av, från andra studenter på kursen. Scrutinizer är ganska likt PHPMetrics men de har lite olika styrkor. PHPMetrics känns defintivt som ett verktyg som är gjort mer för en god på flertal optimeringsområden. Medans Scrutinizer känns mer optimalt var att gå in på lite djupare nivå. Jag tycker det var väldigt händigt att direkt kunna se "döda" kod segment, vilket gjorde det enkelt att ta bort saker som inte bör vara kvar. Badges i sig sa inte så mycket för min del, då jag fick 10 på kvalitén och eftersom jag inte gjorde några fler test för mina klasser, så min coverage höll sig på samma nivå.</p>
    <p>Jag kommer svara på denna fråga genom det jag skrev i min diskussion. Utifrån studien som jag gjorde tycker jag det känns uppenbart att man kan aktivt använda dessa verktyg för att jobba med kodkvalitet och ha en mer saniterad kod (clean code). Scrutinizer ger även en väldigt god överblick vilket ger en bra metod för beta ner på antalet problem som uppstår. Förutom att man får bättre kod lär man sig också mycket mer, och jag tycker personligen att man lär sig att den "personliga" kodstil man har skapar lite "oegentligheter" och löser saker på ett mer komplicerat sätt än vad det behöver vara. Detta kan nog kanske samtidigt vara ett dubbeläggat svärd tror jag i form av att det kan nog säkert även hämma lite mer kreativa eller "oortodoxa" lösningar. Jag tror badges definitivt kan visa att en kod är bra speciellt coverage, då den tyder på att koden är väll testad för fel.</p>
    <p>Mitt TIL för detta KMOM är nog hur jag lärt mig hur jag kan skriva koden annorlunda på annat sätt än jag trodde, eftersom verktygen som användes visade mig en mer effektiv kod-praxis.</p>
</p>
  </li>
  <li>
    <h2 id="Projektet">Kursmoment 10/Projekt</h2>
    <h2>Krav 1,2,3: </h2>

</p>  
</li>
</ul>
        </article>
    </main>

    <aside class="aside">
        <h2>Innehållsförteckning</h2>
        <a href="#kmom1"><h3>Kursmoment 1</h3></a>
        <a href="#kmom2"><h3>Kursmoment 2</h3></a>
        <a href="#kmom3"><h3>Kursmoment 3</h3></a>
        <a href="#kmom4"><h3>Kursmoment 4</h3></a>
        <a href="#kmom5"><h3>Kursmoment 5</h3></a>
        <a href="#kmom6"><h3>Kursmoment 6</h3></a>
    </aside>
</div>
{% endblock %}